{"version":3,"file":"static/js/335.a1c7b1cc.chunk.js","mappings":"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","sources":["components/App/App.styled.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nfont-size: 20;\ncolor: #010101;\n`;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n`;\nexport const Input = styled(Field)`\n  width: 100%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  box-sizing: border-box;\n  background-color: white;\n  color: black;\n  border: 2px solid #4caf50;\n  \n  border-radius: 12px;\n  &:hover, &:focus {\n    outline:none;\n    background-color: #008CBA;\n    color: white;\n    box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24),\n      0 17px 50px 0 rgba(0, 0, 0, 0.19);;\n  }\n`;\nexport const Button = styled.button`\n  padding: 10px;\n  border-radius: 12px;\n  background-color: white;\n  color: black;\n  border: 2px solid #4caf50;\n  \n  &:hover, &:focus {\n    background-color: #008CBA;\n    color: white;\n    box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24),\n      0 17px 50px 0 rgba(0, 0, 0, 0.19);`;","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { FormStyled, Input, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Notiflix from 'notiflix';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selector';\n\n\nfunction ContactForm () {\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.string().min(6).max(16).required(),\n  });\n\n  \n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const initialValues = {\n    name: '',\n    number: '',\n  }\n\n  \n  const handleSubmit = (items, {resetForm}) => {\n    \n    const allContacts = {...items};\n    if (contacts.find(\n      ({name}) => name.toLowerCase() === allContacts.name.trim().toLowerCase())) {\n      Notiflix.Notify.info(`Contact ${allContacts.name} already exist`);\n      resetForm();\n      return;\n    } \n      dispatch(addContact(allContacts));\n        resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled>\n        <label htmlFor=\"name\">\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n           \n          />\n          <ErrorMessage component=\"div\" name=\"name\" />\n        </label>\n        <label htmlFor=\"number\">\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Number\"\n            \n          />\n          <ErrorMessage component=\"div\" name=\"number\" />\n        </label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormStyled>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  list-style-type: none;\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Avatar = styled.img`\n  border-radius: 50%;\n  display: block;\n  max-width: 100%;\n  height: auto;\n`;\nexport const Contact = styled.div`\n  font-size: 15px;\n  display: flex;\n`;\nexport const Wrapper = styled.div`\n  text-align: left;\n  margin-left: 10px;\n`;\n\nexport const Button = styled.button`\n  margin-left: 15px;\n  padding: 5px;\n  border-radius: 12px;\n  background-color: white;\n  color: black;\n  border: 2px solid #4caf50;\n  font-size: 10px;\n  display: inline-block;\n  width: 85px;\nheight: 25px;\n \n  \n  &:hover, &:focus {\n    background-color: #008CBA;\n    color: white;\n    box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24),\n      0 17px 50px 0 rgba(0, 0, 0, 0.19);\n`;\n","import {\n  Item,\n  Contact,\n  Wrapper,\n  Button,\n} from '../ContactList/ContactList.styled';\nimport { BsPersonCircle } from 'react-icons/bs';\nimport { AiFillPhone } from 'react-icons/ai';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/operations';\n\nexport const ContactListItem = ({\n  id,\n  name: nameValue,\n  number: numberValue,\n  handleDelete,\n}) => {\n  const [isEdit, setIsEdit] = useState(false);\n  const [name, setName] = useState(nameValue);\n  const [number, setNumber] = useState(numberValue);\n  const dispatch = useDispatch();\n\n  const handleChangeMode = () => {\n    if (isEdit) {\n      setIsEdit(prev => !prev);\n      dispatch(editContact({ id, name, number }));\n      return;\n    }\n    setIsEdit(prev => !prev);\n  };\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        return;\n      case 'number':\n        setNumber(e.target.value);\n        return;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <Item>\n      <Contact>\n        <BsPersonCircle size=\"25\" color=\"#1E90FF\" />\n        <Wrapper>\n          {isEdit ? (\n            <input\n              name=\"name\"\n              onChange={handleChange}\n              type=\"text\"\n              value={name}\n            />\n          ) : (\n            <span>\n              {' '}\n              <AiFillPhone />\n              {name}:{' '}\n            </span>\n          )}\n\n          <br />\n          {isEdit ? (\n            <input\n              name=\"number\"\n              onChange={handleChange}\n              type=\"text\"\n              value={number}\n            />\n          ) : (\n            <span> {number}</span>\n          )}\n        </Wrapper>\n      </Contact>\n      <Button onClick={() => handleDelete(id)}>Delete</Button>\n      <Button onClick={handleChangeMode}>{isEdit ? 'Save' : 'Edit'}</Button>\n    </Item>\n  );\n};\n","import React from 'react';\n\nimport { List } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectStatusFilter } from 'redux/selector';\nimport { deleteContact, fetchContacts } from 'redux/operations';\nimport { useEffect } from 'react';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\n\nfunction ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectStatusFilter);\n  const dispatch = useDispatch();\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n    );\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <List>\n      {getVisibleContacts().map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          handleDelete={handleDelete}\n        />\n      ))}\n    </List>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\nmax-width: 500px;\nmargin-left: auto;\nmargin-right: auto;\ntext-align: center;\npadding: 10px;\n`;\nexport const Title = styled.h1`\n  font-size: 30px;\n  font-weight: 600;\n\n  background-image: conic-gradient(#553c9a, #ee4b2b, #00c2cb, #553c9a);\n  color: transparent;\n  background-clip: text;\n  -webkit-background-clip: text;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Container, Title } from './Section.styled'\n\nconst Section = ({title, children}) => (\n    <Container>\n        <Title>{title}</Title>\n        {children}\n    </Container>\n);\n\nexport default Section;\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/operations';\n\nimport { Container } from '../components/App/App.styled';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\n//import Filter from '../components/Filter/Filter';\nimport Section from '../components/Section/Section';\nimport { selectError, selectIsLoading } from 'redux/selector';\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        \n        {isLoading && !error && <b>Request in progress...</b>}\n        <ContactList />\n      </Section>\n    </Container>\n  );\n}\nexport default Contacts;\n"],"names":["Container","styled","FormStyled","Form","Input","Field","Button","schema","yup","shape","name","required","number","min","max","dispatch","useDispatch","contacts","useSelector","selectContacts","initialValues","validationSchema","onSubmit","items","resetForm","allContacts","find","toLowerCase","trim","Notiflix","addContact","htmlFor","type","placeholder","component","List","Item","Contact","Wrapper","ContactListItem","id","nameValue","numberValue","handleDelete","useState","isEdit","setIsEdit","setName","setNumber","handleChange","e","target","value","size","color","onChange","onClick","prev","editContact","filter","selectStatusFilter","useEffect","fetchContacts","deleteContact","contact","includes","map","Title","title","children","isLoading","selectIsLoading","error","selectError"],"sourceRoot":""}