{"version":3,"file":"static/js/462.acb3b3ad.chunk.js","mappings":"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","sources":["components/App/App.styled.jsx","components/ContactForm/ContactForm.styled.jsx","redux/selector.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nfont-size: 20;\ncolor: #010101;\n`;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n`;\nexport const Input = styled(Field)`\n  width: 100%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  box-sizing: border-box;\n  background-color: white;\n  color: black;\n  border: 2px solid #4caf50;\n  \n  border-radius: 12px;\n  &:hover, &:focus {\n    outline:none;\n    background-color: #008CBA;\n    color: white;\n    box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24),\n      0 17px 50px 0 rgba(0, 0, 0, 0.19);;\n  }\n`;\nexport const Button = styled.button`\n  padding: 10px;\n  border-radius: 12px;\n  background-color: white;\n  color: black;\n  border: 2px solid #4caf50;\n  \n  &:hover, &:focus {\n    background-color: #008CBA;\n    color: white;\n    box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24),\n      0 17px 50px 0 rgba(0, 0, 0, 0.19);`;","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectStatusFilter = state => state.filter.filter ;\n\n","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { FormStyled, Input, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Notiflix from 'notiflix';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selector';\n\n\nfunction ContactForm () {\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.string().min(6).max(16).required(),\n  });\n\n  \n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const initialValues = {\n    name: '',\n    number: '',\n  }\n\n  \n  const handleSubmit = (items, {resetForm}) => {\n    \n    const allContacts = {...items};\n    if (contacts.find(\n      ({name}) => name.toLowerCase() === allContacts.name.trim().toLowerCase())) {\n      Notiflix.Notify.info(`Contact ${allContacts.name} already exist`);\n      resetForm();\n      return;\n    } \n      dispatch(addContact(allContacts));\n        resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled>\n        <label htmlFor=\"name\">\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n           \n          />\n          <ErrorMessage component=\"div\" name=\"name\" />\n        </label>\n        <label htmlFor=\"number\">\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Number\"\n            \n          />\n          <ErrorMessage component=\"div\" name=\"number\" />\n        </label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormStyled>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  list-style-type: none;\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Avatar = styled.img`\n  border-radius: 50%;\n  display: block;\n  max-width: 100%;\n  height: auto;\n`;\nexport const Contact = styled.div`\n  font-size: 15px;\n  display: flex;\n`;\nexport const Wrapper = styled.div`\n  text-align: left;\n  margin-left: 10px;\n`;\n\nexport const Button = styled.button`\n  margin-left: 15px;\n  padding: 5px;\n  border-radius: 12px;\n  background-color: white;\n  color: black;\n  border: 2px solid #4caf50;\n  font-size: 10px;\n  display: inline-block;\n  width: 85px;\nheight: 25px;\n \n  \n  &:hover, &:focus {\n    background-color: #008CBA;\n    color: white;\n    box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24),\n      0 17px 50px 0 rgba(0, 0, 0, 0.19);\n`;\n","import React from 'react';\nimport {\n  List,\n  Item,\n  Contact,\n  Wrapper,\n  Button,\n} from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectStatusFilter } from 'redux/selector';\nimport { deleteContact, fetchContacts } from 'redux/operations';\nimport { useEffect } from 'react';\n\nfunction ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectStatusFilter);\n  const dispatch = useDispatch();\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n    );\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <List>\n      {getVisibleContacts().map(({ id, name, number }) => (\n        <Item key={id}>\n          <Contact>\n            <Wrapper>\n              <span>{name}: </span>\n              <br />\n              <span>{number} </span>\n            </Wrapper>\n          </Contact>\n          <Button onClick={() => handleDelete(id)}>Delete</Button>\n        </Item>\n      ))}\n    </List>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: 15px;\n`;\nexport const Input = styled.input`\n  width: 100%;\n  padding: 12px 20px;\n  margin: 15px 0;\n  box-sizing: border-box;\n  background-color: white;\n  color: black;\n  border: 2px solid #4caf50;\n  border-radius: 12px;\n\n  &:hover,\n  &:focus {\n    outline: none;\n    background-color: #008cba;\n    color: white;\n    box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24),\n      0 17px 50px 0 rgba(0, 0, 0, 0.19);\n  }\n`;\n","import React from 'react';\n\nimport { Label, Input } from './Filter.styled';\nimport { setFilterValue } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectStatusFilter } from 'redux/selector';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const handleChange = e => {\n    dispatch(setFilterValue(e.target.value))\n  }\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name='filter'\n        placeholder='Enter filter'\n        value={filter}\n        onChange={handleChange}\n      />\n\n    \n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\nmax-width: 500px;\nmargin-left: auto;\nmargin-right: auto;\ntext-align: center;\npadding: 10px;\n`;\nexport const Title = styled.h1`\n  font-size: 30px;\n  font-weight: 600;\n\n  background-image: conic-gradient(#553c9a, #ee4b2b, #00c2cb, #553c9a);\n  color: transparent;\n  background-clip: text;\n  -webkit-background-clip: text;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Container, Title } from './Section.styled'\n\nconst Section = ({title, children}) => (\n    <Container>\n        <Title>{title}</Title>\n        {children}\n    </Container>\n);\n\nexport default Section;\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/operations';\n\nimport { Container } from '../components/App/App.styled';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport Section from '../components/Section/Section';\nimport { selectError, selectIsLoading } from 'redux/selector';\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        {isLoading && !error && <b>Request in progress...</b>}\n        <ContactList />\n      </Section>\n    </Container>\n  );\n}\nexport default Contacts;\n"],"names":["Container","styled","FormStyled","Form","Input","Field","Button","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectStatusFilter","filter","schema","yup","shape","name","required","number","min","max","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","resetForm","allContacts","find","toLowerCase","trim","Notiflix","addContact","htmlFor","type","placeholder","component","List","Item","Contact","Wrapper","useEffect","fetchContacts","contact","includes","map","id","onClick","deleteContact","handleDelete","Label","value","onChange","e","setFilterValue","target","Title","title","children"],"sourceRoot":""}